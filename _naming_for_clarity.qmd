## Naming For Clarity {.smaller}

It may seem inconsequential, but carefully naming variables and methods can improve the
readability of code massively and can help to make code self-documenting.

A few naming tips and conventions:

::: {.incremental}
- The name should show the intention, think about how someone else might read it (this could be future you)
- Use pronounceable names e.g.
- ```
 ms    --> mass
 chclt --> chocolate
 stm   --> stem
 ```
- avoid abbreviations and single letter variable names where possible
- Use names that can be searched
- One word per concept e.g. choose one of `put`, `insert`, `add` in the same code base
:::

## Naming For Clarity {.smaller}

::: {.incremental}
- Plurals to indicate groups, e.g. a list of dog objects would be `dogs`, not `dog_list`
- Describe content rather than storage type e.g.
- ```
array       --> dogs
age_int     --> age
country_set --> countries
```
- Naming booleans, use prefixes like `is`, `has` or `can` and avoid negations like `not_green` e.g.
- ```
purple    --> is_purple
not_plant --> is_plant
sidekick  --> has_sidekick
```
- Keep it simple and use technical terms where appropriate
:::

## Explaining Variables

Without explaining variable: \

```python

def calculate_fare(age):
    if (age < 14):
        return 3
        ...
```

With explaining variable: \

```python

def calculate_fare(age):
    is_child = age < 14
    if (is_child):
        return 3
    ...
```

## Explaining Variables

Without an explaining variable, it is hard to see what this code is doing:

```python
import re

re.search("^\\+?[1-9][0-9]{7,14}$", "Sophie: CV56 9PQ, +12223334444")
```

## With explaining variables:

It is easier to see the intention. The code is more self-documenting.

```python
import re

phone_number_regex = "^\\+?[1-9][0-9]{7,14}$"
re.search(phone_number_regex, "Sophie: CV56 9PQ, +12223334444")
```

## Exercise 3 {.smaller}

::: {style="font-size: 80%;"}

Look through the code for any names of methods or variables that could be improved or
clarified and update them. Note if you are using an IDE like Intellij or VSCode,
you can use automatic renaming.
Can you find an example from each of the suggestions listed below?
Does this make the code easier to follow?

Consider the following:

- The name should show the intention, think about how someone else might read it (this could be future you)
- Use pronounceable names e.g. `mass` not `ms`, `stem` not `stm`
- avoid abbreviations and single letter variable names where possible
- One word per concept e.g. choose one of `put`, `insert`, `add` in the same code base
- Use names that can be searched
- Describe content rather than storage type
- Naming booleans, use prefixes like `is`, `has` or `can` and avoid negations like `not_green`
- Plurals to indicate groups, e.g. a list of dog objects would be `dogs`, not `dog_list`
- Keep it simple and use technical terms where appropriate
- Use explaining variables

:::
