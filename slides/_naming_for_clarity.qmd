## Naming For Clarity

It may seem inconsequential, but carefully naming variables and methods can improve the
readability of code massively and can help to make code self documenting.

A few naming tips and conventions:

- The name should show the intention, think about how someone else might read it (this could be future you)
- Use pronounceable names e.g. `mass` not `ms`, `stem` not `stm`
- avoid abbreviations and single letter variable names where possible
- One word per concept e.g. choose one of `put`, `insert`, `add` in the same code base
- Use names that can be searched
- Describe content rather than storage type
- Naming booleans, use prefixes like `is`, `has` or `can` and avoid negations like `not_green`
- Plurals to indicate groups, e.g. a list of dog objects would be `dogs`, not `dog_list`
- Keep it simple and use technical terms where appropriate
- Use explaining variables

## Naming For Clarity

Some examples:

- `ms`, `chclt`, `stm` --> `mass`, `chocolate`, `stem`
- `array`, `list`, `age_int`, `country_set` --> `dogs`, `cats`, `age`, `countries`
- `purple`, `not_plant`, `sidekick` --> `is_purple`, `is_plant`, `has_sidekick`

## Explaining Variables

Without explaining variables, it is hard to see what this code is doing:

```
import re

re.match("^\\+?[1-9][0-9]{7,14}$", "+12223334444")
```

## With explaining variables:

It is easier to see the intention. The code is more self-documenting.

```
import re

validate_phone_number_pattern = "^\\+?[1-9][0-9]{7,14}$"
re.match(validate_phone_number_pattern, "+12223334444")
```

